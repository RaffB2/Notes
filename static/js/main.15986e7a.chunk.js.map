{"version":3,"sources":["components/button.jsx","components/Input.jsx","components/output.jsx","components/todo.jsx","App.js","reportWebVitals.js","index.js"],"names":["props","className","color","onClick","eventHandler","doWhat","btnName","useState","textInput","setTextInput","type","onChange","e","target","value","addNewNote","data","map","note","index","moveUp","moveDown","editNote","deleteNote","swapElements","arr","e1","e2","temp","thingsToDo","setThingsToDo","useEffect","localStorage","getItem","JSON","parse","setItem","stringify","newNote","length","trim","concat","window","alert","idOfNote","newArr","splice","App","console","log","todo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.15986e7a.chunk.js","sourcesContent":["const Button = (props) => <button className={props.className} color=\"primary\" onClick={() => { props.eventHandler(props.doWhat); }}>{props.btnName}</button>\r\n\r\nexport default { Button };","import { useState } from 'react'\r\nimport button from './button';\r\nimport './input.css'\r\n\r\nconst InputField = (props) => {\r\n    const [textInput, setTextInput] = useState('');\r\n\r\n    return (\r\n        <div >\r\n            <input type=\"text\" className=\"input\" onChange={(e) => { setTextInput(e.target.value); }}></input>\r\n            <button.Button className={\"button button2\"} btnName=\"Add\" doWhat={textInput} eventHandler={props.addNewNote} />\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default { InputField }","\r\nimport button from './button'\r\nimport './output.css'\r\nconst OutPutField = (props) => {\r\n\r\n    const listNotes = props.data.map((note, index) =>\r\n        <div key={index} className=\"wrap\">\r\n            <div className=\"horizontal\">\r\n                <button.Button className={\"btn\"} eventHandler={props.moveUp} doWhat={index} btnName=\"Up\" />\r\n                <button.Button className={\"btn\"} eventHandler={props.moveDown} doWhat={index} btnName=\"Down\" />\r\n            </div>\r\n            <div className=\"list\">\r\n                <div className=\"container\"></div>\r\n                <p>\r\n                    <input type=\"text\" value={note} onChange={(e) => { props.editNote(index, e.target.value)}}></input>\r\n                    <span>\r\n                        <i className=\"fas fa-minus-circle\" onClick={() => { props.deleteNote(index);}}></i>\r\n                    </span>\r\n                </p>\r\n\r\n            </div>\r\n        </div>)\r\n\r\n    return listNotes;\r\n}\r\n\r\nexport default { OutPutField }\r\n","import { useState, useEffect } from 'react';\r\nimport input from './Input';\r\nimport output from './output';\r\n\r\nconst Todo = () => {\r\n    const [thingsToDo, setThingsToDo] = useState([]);\r\n    //storage\r\n    useEffect(() => {\r\n        const data = localStorage.getItem('saved-notes');\r\n        if (data) {\r\n            setThingsToDo(JSON.parse(data));\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(\"saved-notes\", JSON.stringify(thingsToDo));\r\n    })\r\n\r\n    const addNewNote = (newNote) => {\r\n        if (newNote.length === 0 || !newNote.trim()) {\r\n            window.alert(`Note cannot be empty`);\r\n        }\r\n        else {\r\n            //TODO: Change to object {name: X, note:Y}.\r\n            setThingsToDo([...thingsToDo.concat(newNote)]);\r\n        }\r\n    }\r\n\r\n    const deleteNote = (idOfNote) => {\r\n        const newArr = [...thingsToDo];\r\n        newArr.splice(idOfNote, 1);\r\n        setThingsToDo(newArr);\r\n    }\r\n\r\n    const moveUp = (idOfNote) => {\r\n        if (idOfNote > 0) {\r\n            const newArr = [...thingsToDo];\r\n            swapElements(newArr, idOfNote - 1, idOfNote);\r\n            setThingsToDo(newArr);\r\n        }\r\n    }\r\n\r\n    const moveDown = (idOfNote) => {\r\n        if (idOfNote + 1 < thingsToDo.length) {//prevents array out of bounds\r\n            const newArr = [...thingsToDo];\r\n            swapElements(newArr, idOfNote + 1, idOfNote);\r\n            setThingsToDo(newArr);\r\n        }\r\n    }\r\n\r\n    const editNote = (idOfNote, e) => {\r\n        const newArr = [...thingsToDo];\r\n        newArr[idOfNote] = e;\r\n        if (e.length === 0 || !e.trim()) {\r\n            newArr[idOfNote] = `Do not leave blank!`;\r\n        }\r\n        setThingsToDo(newArr);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Your notes</h1>\r\n            <input.InputField addNewNote={addNewNote} />\r\n            <output.OutPutField data={thingsToDo} deleteNote={deleteNote} moveUp={moveUp} moveDown={moveDown} editNote={editNote} />\r\n        </div>\r\n    )\r\n\r\n}\r\nconst swapElements = (arr, e1, e2) => {\r\n    let temp = arr[e1];\r\n    arr[e1] = arr[e2]\r\n    arr[e2] = temp;\r\n}\r\n\r\nexport default { Todo }\r\n\r\n","import './styles.css'\nimport todo from './components/todo'\n\nfunction App() {\n  console.log(`Edit notes by typing, do not leave blank`)\n  return (\n    <div className=\"wrapper\">\n      <todo.Todo />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}